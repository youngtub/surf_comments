{"version":3,"sources":["../lib/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport {\n  GraphQLObjectType,\n  GraphQLSchema,\n} from 'graphql';\n\n\n// Mark field/type/schema\nexport const Processed = Symbol();\n\n\n// Used to identify UserErrors\nexport const IsUserError = Symbol();\n\n\n// UserErrors will be sent to the user\nexport class UserError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.name = 'Error';\n    this.message = args[0];\n    this[IsUserError] = true;\n    Error.captureStackTrace(this, 'Error');\n  }\n}\n\n\n// Modifies errors before sending to the user\nexport let defaultHandler = function (err) {\n  if (err[IsUserError]) {\n    return err;\n  }\n  const errId = uuid.v4();\n  err.message = `${err.message}: ${errId}`;\n  console.error(err && err.stack || err);\n  err.message = `Internal Error: ${errId}`;\n  return err;\n};\n\n\n// Changes the default error handler function\nexport function setDefaultHandler(handlerFn) {\n  defaultHandler = handlerFn;\n}\n\n\n// Masks graphql schemas, types or individual fields\nexport function maskErrors(thing, fn = defaultHandler) {\n  if (thing instanceof GraphQLSchema) {\n    maskSchema(thing, fn);\n  } else if (thing instanceof GraphQLObjectType) {\n    maskType(thing, fn);\n  } else {\n    maskField(thing, fn);\n  }\n}\n\n\nfunction maskField(field, fn) {\n  const resolveFn = field.resolve;\n  if (field[Processed] || !resolveFn) {\n    return;\n  }\n\n  field[Processed] = true;\n  field.resolve = async function (...args) {\n    try {\n      const out = resolveFn.call(this, ...args);\n      return await Promise.resolve(out);\n    } catch (e) {\n      throw fn(e);\n    }\n  };\n\n  // save the original resolve function\n  field.resolve._resolveFn = resolveFn;\n}\n\n\nfunction maskType(type, fn) {\n  if (type[Processed] || !type.getFields) {\n    return;\n  }\n\n  const fields = type.getFields();\n  for (const fieldName in fields) {\n    if (!Object.hasOwnProperty.call(fields, fieldName)) {\n      continue;\n    }\n\n    maskField(fields[fieldName], fn);\n  }\n}\n\n\nfunction maskSchema(schema, fn) {\n  const types = schema.getTypeMap();\n  for (const typeName in types) {\n    if (!Object.hasOwnProperty.call(types, typeName)) {\n      continue;\n    }\n\n    maskType(types[typeName], fn);\n  }\n}\n"]}